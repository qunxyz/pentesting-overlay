diff -uNr beecrypt-4.2.1-ori/c++/beeyond/DHIESParameterSpec.cxx beecrypt-4.2.1/c++/beeyond/DHIESParameterSpec.cxx
--- beecrypt-4.2.1-ori/c++/beeyond/DHIESParameterSpec.cxx	2005-05-27 15:42:52.000000000 +0800
+++ beecrypt-4.2.1/c++/beeyond/DHIESParameterSpec.cxx	2018-07-18 11:54:38.452412592 +0800
@@ -68,16 +68,16 @@
 
 DHIESParameterSpec::DHIESParameterSpec(const String& descriptor) throw (IllegalArgumentException)
 {
-	UnicodeString match(descriptor.toUnicodeString());
+	icu::UnicodeString match(descriptor.toUnicodeString());
 
 	UErrorCode status = U_ZERO_ERROR;
 	UParseError error;
 
-	auto_ptr<RegexPattern> p(RegexPattern::compile("DHIES\\((\\w(?:\\w|\\d)*(?:-(?:\\w|\\d)*)*),(\\w(?:\\w|\\d)*(?:-(?:\\w|\\d)*)*),(\\w(?:\\w|\\d)*(?:-(?:\\w|\\d)*)*)(?:,(\\d+))?(?:,(\\d+))?\\)", error, status));
+	auto_ptr<icu::RegexPattern> p(icu::RegexPattern::compile("DHIES\\((\\w(?:\\w|\\d)*(?:-(?:\\w|\\d)*)*),(\\w(?:\\w|\\d)*(?:-(?:\\w|\\d)*)*),(\\w(?:\\w|\\d)*(?:-(?:\\w|\\d)*)*)(?:,(\\d+))?(?:,(\\d+))?\\)", error, status));
 	if (U_FAILURE(status))
 		throw RuntimeException("RegexPattern doesn't compile");
 
-	auto_ptr<RegexMatcher> m(p->matcher(match, status));
+	auto_ptr<icu::RegexMatcher> m(p->matcher(match, status));
 	if (!m->matches(status))
 		throw IllegalArgumentException("couldn't parse descriptor into DHIES(<digest>,<cipher>,<mac>[,<cipherkeylen>[,<mackeylen>]])");
 
diff -uNr beecrypt-4.2.1-ori/c++/crypto/Cipher.cxx beecrypt-4.2.1/c++/crypto/Cipher.cxx
--- beecrypt-4.2.1-ori/c++/crypto/Cipher.cxx	2005-02-06 04:16:54.000000000 +0800
+++ beecrypt-4.2.1/c++/crypto/Cipher.cxx	2018-07-18 11:51:08.883919238 +0800
@@ -32,7 +32,7 @@
 using namespace beecrypt::crypto;
 
 namespace {
-	RegexPattern* _amppat = 0;
+	icu::RegexPattern* _amppat = 0;
 }
 
 const int Cipher::ENCRYPT_MODE = 1;
@@ -55,7 +55,7 @@
 
 Cipher* Cipher::getInstance(const String& transformation) throw (NoSuchAlgorithmException, NoSuchPaddingException)
 {
-	UnicodeString match(transformation.toUnicodeString());
+	icu::UnicodeString match(transformation.toUnicodeString());
 
 	UErrorCode status = U_ZERO_ERROR;
 
@@ -63,14 +63,14 @@
 	{
 		UParseError error;
 
-		_amppat = RegexPattern::compile("(\\w+)(?:/(\\w*))?(?:/(\\w+))?", error, status);
+		_amppat = icu::RegexPattern::compile("(\\w+)(?:/(\\w*))?(?:/(\\w+))?", error, status);
 		// shouldn't happen
 		if (U_FAILURE(status))
 			throw RuntimeException("ICU regex compilation problem");
 	}
 
 	status = U_ZERO_ERROR;
-	RegexMatcher *m = _amppat->matcher(match, status);
+	icu::RegexMatcher *m = _amppat->matcher(match, status);
 
 	status = U_ZERO_ERROR;
 	if (m->matches(status))
@@ -225,13 +225,13 @@
 	{
 		UParseError error;
 
-		_amppat = RegexPattern::compile("(\\w+)(?:/(\\w*))?(?:/(\\w+))?", error, status);
+		_amppat = icu::RegexPattern::compile("(\\w+)(?:/(\\w*))?(?:/(\\w+))?", error, status);
 		// shouldn't happen
 		if (U_FAILURE(status))
 			throw RuntimeException("ICU regex compilation problem");
 	}
 
-	RegexMatcher *m = _amppat->matcher(transformation.toUnicodeString(), status);
+	icu::RegexMatcher *m = _amppat->matcher(transformation.toUnicodeString(), status);
 
 	if (m->matches(status))
 	{
@@ -382,13 +382,13 @@
 	{
 		UParseError error;
 
-		_amppat = RegexPattern::compile("(\\w+)(?:/(\\w*))?(?:/(\\w+))?", error, status);
+		_amppat = icu::RegexPattern::compile("(\\w+)(?:/(\\w*))?(?:/(\\w+))?", error, status);
 		// shouldn't happen
 		if (U_FAILURE(status))
 			throw RuntimeException("ICU regex compilation problem");
 	}
 
-	RegexMatcher *m = _amppat->matcher(transformation.toUnicodeString(), status);
+	icu::RegexMatcher *m = _amppat->matcher(transformation.toUnicodeString(), status);
 
 	if (m->matches(status))
 	{
diff -uNr beecrypt-4.2.1-ori/c++/lang/Integer.cxx beecrypt-4.2.1/c++/lang/Integer.cxx
--- beecrypt-4.2.1-ori/c++/lang/Integer.cxx	2005-05-16 19:57:55.000000000 +0800
+++ beecrypt-4.2.1/c++/lang/Integer.cxx	2018-07-18 11:37:05.562949162 +0800
@@ -76,11 +76,11 @@
 {
 	UErrorCode status = U_ZERO_ERROR;
 
-	NumberFormat* nf = NumberFormat::createInstance(status);
+	icu::NumberFormat* nf = icu::NumberFormat::createInstance(status);
 
 	if (nf)
 	{
-		Formattable fmt((int32_t) 0);
+		icu::Formattable fmt((int32_t) 0);
 
 		nf->parse(s.toUnicodeString(), fmt, status);
 
diff -uNr beecrypt-4.2.1-ori/c++/lang/Long.cxx beecrypt-4.2.1/c++/lang/Long.cxx
--- beecrypt-4.2.1-ori/c++/lang/Long.cxx	2005-02-23 21:38:48.000000000 +0800
+++ beecrypt-4.2.1/c++/lang/Long.cxx	2018-07-18 11:37:11.859063265 +0800
@@ -88,11 +88,11 @@
 {
 	UErrorCode status = U_ZERO_ERROR;
 
-	NumberFormat* nf = NumberFormat::createInstance(status);
+	icu::NumberFormat* nf = icu::NumberFormat::createInstance(status);
 
 	if (nf)
 	{
-		Formattable fmt((int64_t) 0);
+		icu::Formattable fmt((int64_t) 0);
 
 		nf->parse(s.toUnicodeString(), fmt, status);
 
diff -uNr beecrypt-4.2.1-ori/c++/lang/String.cxx beecrypt-4.2.1/c++/lang/String.cxx
--- beecrypt-4.2.1-ori/c++/lang/String.cxx	2009-06-17 19:05:54.000000000 +0800
+++ beecrypt-4.2.1/c++/lang/String.cxx	2018-07-18 11:34:30.364243952 +0800
@@ -85,7 +85,7 @@
 	assert(_value.size() <= Integer::MAX_VALUE);
 }
 
-String::String(const UnicodeString& copy) : _value((int) copy.length())
+String::String(const icu::UnicodeString& copy) : _value((int) copy.length())
 {
 	assert(_value.size() <= Integer::MAX_VALUE);
 
@@ -101,7 +101,7 @@
 	return *this;
 }
 
-String& String::operator=(const UnicodeString& copy)
+String& String::operator=(const icu::UnicodeString& copy)
 {
 	assert(copy.length() <= Integer::MAX_VALUE);
 
@@ -395,9 +395,9 @@
 	return *this;
 }
 
-UnicodeString String::toUnicodeString() const throw ()
+icu::UnicodeString String::toUnicodeString() const throw ()
 {
-	return UnicodeString(_value.data(), (int32_t) _value.size());
+	return icu::UnicodeString(_value.data(), (int32_t) _value.size());
 }
 
 String String::valueOf(bool b)
diff -uNr beecrypt-4.2.1-ori/c++/util/Date.cxx beecrypt-4.2.1/c++/util/Date.cxx
--- beecrypt-4.2.1-ori/c++/util/Date.cxx	2009-06-17 19:05:54.000000000 +0800
+++ beecrypt-4.2.1/c++/util/Date.cxx	2018-07-18 11:45:50.829237273 +0800
@@ -29,9 +29,9 @@
 
 namespace {
 	#if WIN32
-	__declspec(thread) DateFormat* format = 0;
+	__declspec(thread) icu::DateFormat* format = 0;
 	#else
-	__thread DateFormat* format = 0;
+	__thread icu::DateFormat* format = 0;
 	#endif
 }
 
@@ -112,9 +112,9 @@
 	String result;
 
 	if (!format)
-		format = DateFormat::createDateTimeInstance();
+		format = icu::DateFormat::createDateTimeInstance();
 
-	UnicodeString tmp;
+	icu::UnicodeString tmp;
 
 	result = format->format((UDate) _time, tmp);
 
diff -uNr beecrypt-4.2.1-ori/include/beecrypt/c++/lang/String.h beecrypt-4.2.1/include/beecrypt/c++/lang/String.h
--- beecrypt-4.2.1-ori/include/beecrypt/c++/lang/String.h	2009-06-17 19:05:55.000000000 +0800
+++ beecrypt-4.2.1/include/beecrypt/c++/lang/String.h	2018-07-18 11:41:39.184146196 +0800
@@ -73,11 +73,11 @@
 			String(const bytearray&);
 			String(const array<jchar>&);
 			String(const String& copy);
-			String(const UnicodeString& copy);
+			String(const icu::UnicodeString& copy);
 			virtual ~String() {}
 
 			String& operator=(const String& copy);
-			String& operator=(const UnicodeString& copy);
+			String& operator=(const icu::UnicodeString& copy);
 
 			virtual jchar charAt(jint index) const throw (IndexOutOfBoundsException);
 			virtual jint compareTo(const String& str) const throw ();
@@ -101,7 +101,7 @@
 			String toUpperCase() const throw ();
 			const array<jchar>& toCharArray() const throw ();
 			virtual String toString() const throw ();
-			UnicodeString toUnicodeString() const throw ();
+			icu::UnicodeString toUnicodeString() const throw ();
 		};
 
 		BEECRYPTCXXAPI
