diff -uNr pulseeffects-4.3.4-ori/src/pipeline_base.cpp pulseeffects-4.3.4/src/pipeline_base.cpp
--- pulseeffects-4.3.4-ori/src/pipeline_base.cpp	2018-09-23 22:24:02.472099491 +0800
+++ pulseeffects-4.3.4/src/pipeline_base.cpp	2018-09-24 03:10:11.354633101 +0800
@@ -23,8 +23,6 @@
     util::debug(pb->log_tag + debug);
 
     if (err->message == std::string("Internal data stream error.")) {
-        pb->set_null_pipeline();
-
         // As far as I know only a bad latency or buffer value causes this error
         // in PE pipeline
 
@@ -154,7 +152,6 @@
         /*when we are playing it is necessary to reset the pipeline for the new
          * value to take effect
          */
-        pb->set_null_pipeline();
         pb->update_pipeline_state();
     }
 }
@@ -164,7 +161,6 @@
         /*when we are playing it is necessary to reset the pipeline for the new
          * value to take effect
          */
-        pb->set_null_pipeline();
         pb->update_pipeline_state();
     }
 }
@@ -249,8 +245,6 @@
 }
 
 PipelineBase::~PipelineBase() {
-    set_null_pipeline();
-
     // avoinding memory leak. If the spectrum is not in a bin we have to unref
     // it
 
@@ -312,8 +306,6 @@
 
     if (name != current_device) {
         if (playing) {
-            set_null_pipeline();
-
             g_object_set(source, "device", name.c_str(), nullptr);
 
             gst_element_set_state(pipeline, GST_STATE_PLAYING);
@@ -340,25 +332,6 @@
     gst_structure_free(s);
 }
 
-void PipelineBase::set_null_pipeline() {
-    gst_element_set_state(pipeline, GST_STATE_NULL);
-
-    GstState state, pending;
-
-    gst_element_get_state(pipeline, &state, &pending, state_check_timeout);
-
-    /*on_message_state is not called when going to null. I don't know why.
-     *so we have to update the variable manually after setting to null.
-     */
-
-    if (state == GST_STATE_NULL) {
-        playing = false;
-    }
-
-    util::debug(log_tag + gst_element_state_get_name(state) + " -> " +
-                gst_element_state_get_name(pending));
-}
-
 void PipelineBase::update_pipeline_state() {
     bool wants_to_play = false;
 
@@ -370,10 +343,8 @@
         }
     }
 
-    if (!playing && wants_to_play) {
+    if (wants_to_play) {
         gst_element_set_state(pipeline, GST_STATE_PLAYING);
-    } else if (playing && !wants_to_play) {
-        set_null_pipeline();
     }
 }
 
diff -uNr pulseeffects-4.3.4-ori/src/sink_input_effects.cpp pulseeffects-4.3.4/src/sink_input_effects.cpp
--- pulseeffects-4.3.4-ori/src/sink_input_effects.cpp	2018-09-23 22:24:02.472099491 +0800
+++ pulseeffects-4.3.4/src/sink_input_effects.cpp	2018-09-24 03:23:05.841625057 +0800
@@ -148,7 +148,6 @@
                           gchar* key,
                           SinkInputEffects* l) {
     if (l->playing) {
-        l->set_null_pipeline();
         l->update_pipeline_state();
     }
 }
diff -uNr pulseeffects-4.3.4-ori/src/source_output_effects.cpp pulseeffects-4.3.4/src/source_output_effects.cpp
--- pulseeffects-4.3.4-ori/src/source_output_effects.cpp	2018-09-23 22:24:02.472099491 +0800
+++ pulseeffects-4.3.4/src/source_output_effects.cpp	2018-09-24 03:23:30.091730855 +0800
@@ -124,7 +124,6 @@
                           gchar* key,
                           SourceOutputEffects* l) {
     if (l->playing) {
-        l->set_null_pipeline();
         l->update_pipeline_state();
     }
 }
