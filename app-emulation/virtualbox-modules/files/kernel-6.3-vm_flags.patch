diff --color -uNr vbox-kernel-module-src-7.0.6-ori/vboxdrv/r0drv/linux/memobj-r0drv-linux.c vbox-kernel-module-src-7.0.6/vboxdrv/r0drv/linux/memobj-r0drv-linux.c
--- vbox-kernel-module-src-7.0.6-ori/vboxdrv/r0drv/linux/memobj-r0drv-linux.c	2023-01-12 01:31:36.000000000 +0800
+++ vbox-kernel-module-src-7.0.6/vboxdrv/r0drv/linux/memobj-r0drv-linux.c	2023-03-15 21:42:12.048322275 +0800
@@ -1401,7 +1401,7 @@
             while (rc-- > 0)
             {
                 flush_dcache_page(pMemLnx->apPages[rc]);
-                papVMAs[rc]->vm_flags |= VM_DONTCOPY | VM_LOCKED;
+                vm_flags_set(papVMAs[rc], VM_DONTCOPY | VM_LOCKED);
             }
 
             LNX_MM_UP_READ(pTask->mm);
@@ -1873,9 +1873,9 @@
                     /* Thes flags help making 100% sure some bad stuff wont happen (swap, core, ++).
                      * See remap_pfn_range() in mm/memory.c */
 #if    RTLNX_VER_MIN(3,7,0)
-                    vma->vm_flags |= VM_DONTEXPAND | VM_DONTDUMP;
+                    vm_flags_set(vma, VM_DONTEXPAND | VM_DONTDUMP);
 #else
-                    vma->vm_flags |= VM_RESERVED;
+                    vm_flags_set(vma, VM_RESERVED);
 #endif
 #elif RTLNX_VER_MIN(2,6,11)
                     rc = remap_pfn_range(vma, ulAddrCur, page_to_pfn(pMemLnxToMap->apPages[iPage]), PAGE_SIZE, fPg);
