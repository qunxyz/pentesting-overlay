diff -uNr vmci-only/Makefile vmci-only-new/Makefile
--- vmci-only/Makefile	2019-03-07 21:53:07.687527188 +0800
+++ vmci-only-new/Makefile	2019-03-07 22:05:45.874054949 +0800
@@ -107,7 +107,7 @@
 postbuild:: ;
 
 $(DRIVER_KO): prebuild
-	$(MAKE) -C $(BUILD_DIR) SUBDIRS=$$PWD SRCROOT=$$PWD/$(SRCROOT) \
+	$(MAKE) -C $(BUILD_DIR) M=$$PWD SRCROOT=$$PWD/$(SRCROOT) \
 	  MODULEBUILDDIR=$(MODULEBUILDDIR) modules
 	$(MAKE) -C $$PWD SRCROOT=$$PWD/$(SRCROOT) \
 	  MODULEBUILDDIR=$(MODULEBUILDDIR) postbuild
diff -uNr vmci-only/linux/driver.c vmci-only-new/linux/driver.c
--- vmci-only/linux/driver.c	2019-03-07 21:53:07.687527188 +0800
+++ vmci-only-new/linux/driver.c	2019-03-07 22:23:59.281286306 +0800
@@ -51,11 +51,18 @@
 #include "compat_slab.h"
 #include "compat_uaccess.h"
 #include "compat_version.h"
+#include "compat_poll.h"
 
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 9)
 #  error "Linux kernels before 2.6.9 are not supported."
 #endif
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 0, 0) && defined(VERIFY_WRITE)
+ #define write_access_ok(addr, size) access_ok(VERIFY_WRITE, addr, size)
+#else
+ #define write_access_ok(addr, size) access_ok(addr, size)
+#endif
+
 #include "vm_basic_types.h"
 #include "vm_device_version.h"
 
@@ -1460,7 +1467,7 @@
 VMCIUserVAInvalidPointer(VA uva,      // IN:
                          size_t size) // IN:
 {
-   return !access_ok(VERIFY_WRITE, (void *)uva, size);
+   return !access_ok((void *)uva, size);
 }
 
 
diff -uNr vmci-only/shared/compat_poll.h vmci-only-new/shared/compat_poll.h
--- vmci-only/shared/compat_poll.h	1970-01-01 08:00:00.000000000 +0800
+++ vmci-only-new/shared/compat_poll.h	2019-03-07 21:35:29.469030000 +0800
@@ -0,0 +1,30 @@
+#ifndef __COMPAT_POLL_H__
+#define __COMPAT_POLL_H__
+
+#include <linux/poll.h>
+
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(4, 18, 0))
+
+#ifndef __poll_t
+typedef unsigned int __poll_t;
+#endif
+
+static inline __poll_t compat_vfs_poll(struct file *file,
+				       struct poll_table_struct *pt)
+{
+	if (unlikely(!file->f_op->poll))
+		return DEFAULT_POLLMASK;
+	return file->f_op->poll(file, pt);
+}
+
+#else
+
+static inline __poll_t compat_vfs_poll(struct file *file,
+				       struct poll_table_struct *pt)
+{
+	return vfs_poll(file, pt);
+}
+
+#endif
+
+#endif /* __COMPAT_POLL_H__ */
diff -uNr vmci-only/shared/vm_assert.h vmci-only-new/shared/vm_assert.h
--- vmci-only/shared/vm_assert.h	2019-03-07 21:53:07.679526520 +0800
+++ vmci-only-new/shared/vm_assert.h	2019-03-07 22:11:22.801082601 +0800
@@ -67,6 +67,7 @@
 #if defined (VMKPANIC) 
 #include "vmk_assert.h"
 #else /* !VMKPANIC */
+#include <linux/kernel.h>
 #define _ASSERT_PANIC(name) \
            Panic(_##name##Fmt "\n", __FILE__, __LINE__)
 #define _ASSERT_PANIC_BUG(bug, name) \
@@ -107,7 +108,7 @@
 } while(0)
 
 #else
-NORETURN void Panic(const char *fmt, ...) PRINTF_DECL(1, 2);
+#define Panic panic
 #endif
 
 void LogThrottled(uint32 *count, const char *fmt, ...) PRINTF_DECL(2, 3);
