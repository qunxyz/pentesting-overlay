diff --color -uNr vmware-host-modules-w16.2.4/vmmon-only/Makefile.kernel vmware-host-modules-git/vmmon-only/Makefile.kernel
--- vmware-host-modules-w16.2.4/vmmon-only/Makefile.kernel	2022-07-27 04:27:27.000000000 +0800
+++ vmware-host-modules-git/vmmon-only/Makefile.kernel	2022-08-06 22:58:06.149898000 +0800
@@ -29,7 +29,7 @@
 		$(SRCROOT)/bootstrap/*.c)))
 
 clean:
-	rm -rf $(wildcard $(DRIVER).mod.c $(DRIVER).ko .tmp_versions \
+	rm -rf $(wildcard $(DRIVER).mod.c $(DRIVER).ko .tmp_versions .cache.mk \
 		Module.symvers Modules.symvers Module.markers modules.order \
 		$(foreach dir,linux/ common/ bootstrap/ \
 		./,$(addprefix $(dir),.*.cmd .*.o.flags *.o)))
diff --color -uNr vmware-host-modules-w16.2.4/vmmon-only/bootstrap/monLoader.c vmware-host-modules-git/vmmon-only/bootstrap/monLoader.c
--- vmware-host-modules-w16.2.4/vmmon-only/bootstrap/monLoader.c	2022-07-27 04:27:27.000000000 +0800
+++ vmware-host-modules-git/vmmon-only/bootstrap/monLoader.c	2022-08-06 22:58:06.149898000 +0800
@@ -837,7 +837,7 @@
    }
    *line = LINE_INVALID;
 
-   if (header->entries == 0 || header->count == 0) {
+   if (header->count == 0) {
       return ML_ERROR_TABLE_MISSING;
    }
 
diff --color -uNr vmware-host-modules-w16.2.4/vmmon-only/common/crosspage.c vmware-host-modules-git/vmmon-only/common/crosspage.c
--- vmware-host-modules-w16.2.4/vmmon-only/common/crosspage.c	2022-07-27 04:27:27.000000000 +0800
+++ vmware-host-modules-git/vmmon-only/common/crosspage.c	2022-08-06 22:58:06.149898000 +0800
@@ -135,7 +135,7 @@
 
    .monTask.IOMapBase = sizeof(Task64),
 
-   .monGDTR.limit  = GDT_LIMIT,
+   .monGDTR.limit  = VMMON_GDT_LIMIT,
    .monGDTR.offset = GDT_START_VA,
 
    .shadowDR[6].ureg64 = DR6_DEFAULT,
diff --color -uNr vmware-host-modules-w16.2.4/vmmon-only/include/segs.h vmware-host-modules-git/vmmon-only/include/segs.h
--- vmware-host-modules-w16.2.4/vmmon-only/include/segs.h	2022-07-27 04:27:27.000000000 +0800
+++ vmware-host-modules-git/vmmon-only/include/segs.h	2022-08-06 22:58:06.157898000 +0800
@@ -46,15 +46,15 @@
 
 #define PCPU_DATA_SIZE        (32 * CACHELINE_SIZE)
 
-#define GDT_SIZE              (sizeof(Descriptor) * NUM_VALID_SEGMENTS)
-#define GDT_LIMIT             (GDT_SIZE - 1)
+#define VMMON_GDT_SIZE        (sizeof(Descriptor) * NUM_VALID_SEGMENTS)
+#define VMMON_GDT_LIMIT       (VMMON_GDT_SIZE - 1)
 
 #define IRB_SIZE              32 /* Interrupt redirection bitmap. */
 #define TSS_SIZE              (sizeof(Task64) + IRB_SIZE)
 
 #define PCPU_DATA_VA          (VPN_2_VA(GDT_AND_TASK_START))
 #define GDT_START_VA          (PCPU_DATA_VA + PCPU_DATA_SIZE)
-#define TASK_START_VA         (GDT_START_VA + GDT_SIZE)
+#define TASK_START_VA         (GDT_START_VA + VMMON_GDT_SIZE)
 
 /*
  * vmkBoot uses some of the lower-numbered segments, as do host kernels on
diff --color -uNr vmware-host-modules-w16.2.4/vmmon-only/include/vm_assert.h vmware-host-modules-git/vmmon-only/include/vm_assert.h
--- vmware-host-modules-w16.2.4/vmmon-only/include/vm_assert.h	2022-07-27 04:27:27.000000000 +0800
+++ vmware-host-modules-git/vmmon-only/include/vm_assert.h	2022-08-06 22:58:06.157898000 +0800
@@ -40,7 +40,11 @@
 
 // XXX not necessary except some places include vm_assert.h improperly
 #include "vm_basic_types.h"
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 15, 0)
 #include <stdarg.h>
+#else
+#include <linux/stdarg.h>
+#endif
 
 #ifdef __cplusplus
 extern "C" {
@@ -67,6 +71,7 @@
 # if defined (VMKPANIC)
 #  include "vmk_assert.h"
 # else /* !VMKPANIC */
+#  include <linux/kernel.h>
 #  define _ASSERT_PANIC(name) \
            Panic(_##name##Fmt "\n", __FILE__, __LINE__)
 #  define _ASSERT_PANIC_BUG(bug, name) \
@@ -108,7 +113,7 @@
    } while(0)
 
 #else /* !VMKPANIC */
-NORETURN void Panic(const char *fmt, ...) PRINTF_DECL(1, 2);
+#define Panic panic
 #endif
 
 void LogThrottled(uint32 *count, const char *fmt, ...) PRINTF_DECL(2, 3);
diff --color -uNr vmware-host-modules-w16.2.4/vmmon-only/include/vm_basic_defs.h vmware-host-modules-git/vmmon-only/include/vm_basic_defs.h
--- vmware-host-modules-w16.2.4/vmmon-only/include/vm_basic_defs.h	2022-07-27 04:27:27.000000000 +0800
+++ vmware-host-modules-git/vmmon-only/include/vm_basic_defs.h	2022-08-06 22:58:06.157898000 +0800
@@ -51,7 +51,7 @@
  *   C90 7.17, C99 7.19, C11 7.19
  */
 #if !defined(VMKERNEL)
-#  include <stddef.h>
+#  include <linux/stddef.h>
 #else
    /*
     * Vmkernel's bogus __FreeBSD__ value causes gcc <stddef.h> to break.
diff --color -uNr vmware-host-modules-w16.2.4/vmmon-only/include/x86_basic_defs.h vmware-host-modules-git/vmmon-only/include/x86_basic_defs.h
--- vmware-host-modules-w16.2.4/vmmon-only/include/x86_basic_defs.h	2022-07-27 04:27:27.000000000 +0800
+++ vmware-host-modules-git/vmmon-only/include/x86_basic_defs.h	2022-08-06 22:58:06.161898000 +0800
@@ -35,6 +35,8 @@
 #define INCLUDE_ALLOW_VMCORE
 #include "includeCheck.h"
 
+#include <asm/processor-flags.h>
+
 #define X86_MAX_INSTR_LEN  15   /* Max byte length of an x86 instruction. */
 
 #define NUM_IDT_VECTORS 256
diff --color -uNr vmware-host-modules-w16.2.4/vmmon-only/include/x86msr.h vmware-host-modules-git/vmmon-only/include/x86msr.h
--- vmware-host-modules-w16.2.4/vmmon-only/include/x86msr.h	2022-07-27 04:27:27.000000000 +0800
+++ vmware-host-modules-git/vmmon-only/include/x86msr.h	2022-08-06 22:58:06.161898000 +0800
@@ -24,6 +24,7 @@
 
 #ifndef _X86MSR_H_
 #define _X86MSR_H_
+#include <asm/msr-index.h>
 #define INCLUDE_ALLOW_USERLEVEL
 #define INCLUDE_ALLOW_VMX
 
@@ -919,7 +920,11 @@
 /*
  * MISC_FEATURES_ENABLES bits
  */
+#ifdef MSR_MISC_FEATURES_ENABLES_CPUID_FAULT
+#define MSR_MISC_FEATURES_ENABLES_CPUID_FAULTING MSR_MISC_FEATURES_ENABLES_CPUID_FAULT
+#else
 #define MSR_MISC_FEATURES_ENABLES_CPUID_FAULTING 1
+#endif
 
 
 
diff --color -uNr vmware-host-modules-w16.2.4/vmmon-only/linux/hostif.c vmware-host-modules-git/vmmon-only/linux/hostif.c
--- vmware-host-modules-w16.2.4/vmmon-only/linux/hostif.c	2022-07-27 04:27:27.000000000 +0800
+++ vmware-host-modules-git/vmmon-only/linux/hostif.c	2022-08-06 22:58:06.165898000 +0800
@@ -47,6 +47,7 @@
 #include <asm/io.h>
 #include <asm/page.h>
 #include <asm/uaccess.h>
+#include <asm/irq_vectors.h>
 #include <linux/capability.h>
 #include <linux/kthread.h>
 #include <linux/wait.h>
@@ -2356,7 +2357,8 @@
    int ret;
 
    r = APICR_TO_ADDR(r, APICR_VERSION);
-#ifdef HAVE_GET_KERNEL_NOFAULT
+#if defined(HAVE_GET_KERNEL_NOFAULT) || defined(__get_kernel_nofault) || \
+    (LINUX_VERSION_CODE >= KERNEL_VERSION(5, 18, 0))
    ret = get_kernel_nofault(dummy, (void *)r);
 #else
    {
diff --color -uNr vmware-host-modules-w16.2.4/vmnet-only/Makefile.kernel vmware-host-modules-git/vmnet-only/Makefile.kernel
--- vmware-host-modules-w16.2.4/vmnet-only/Makefile.kernel	2022-07-27 04:27:27.000000000 +0800
+++ vmware-host-modules-git/vmnet-only/Makefile.kernel	2022-08-06 22:58:06.165898000 +0800
@@ -32,6 +32,6 @@
 ####
 
 clean:
-	rm -rf $(DRIVER).o $(DRIVER).mod.o $(DRIVER).mod.c $(DRIVER).ko \
+	rm -rf $(DRIVER).o $(DRIVER).mod.o $(DRIVER).mod.c $(DRIVER).ko .cache.mk \
 	       .tmp_versions Module.symvers Modules.symvers Module.markers \
 	       modules.order $($(DRIVER)-y) .*.cmd .*.o.flags
diff --color -uNr vmware-host-modules-w16.2.4/vmnet-only/bridge.c vmware-host-modules-git/vmnet-only/bridge.c
--- vmware-host-modules-w16.2.4/vmnet-only/bridge.c	2022-07-27 04:27:27.000000000 +0800
+++ vmware-host-modules-git/vmnet-only/bridge.c	2022-08-06 22:58:06.165898000 +0800
@@ -66,7 +66,7 @@
 #endif
 
 #if LOGLEVEL >= 4
-static struct timeval vnetTime;
+static u64 vnetTime;
 #endif
 
 typedef struct VNetBridge VNetBridge;
@@ -691,9 +691,9 @@
           * not do it, or netif_rx_ni() will deadlock on the cli() lock --hpreg
           */
 
-	 netif_rx_ni(clone);
+	 compat_netif_rx_ni(clone);
 #	 if LOGLEVEL >= 4
-	 do_gettimeofday(&vnetTime);
+	 vnetTime = ktime_get_ns();
 #	 endif
       }
    }
@@ -809,10 +809,14 @@
 VNetBridgeIsDeviceWireless(struct net_device *dev) //IN: sock
 {
 #if defined(CONFIG_WIRELESS_EXT)
-   return dev->ieee80211_ptr != NULL || dev->wireless_handlers != NULL;
-#else
-   return dev->ieee80211_ptr != NULL;
+   if (dev->wireless_handlers)
+      return true;
+#endif
+#if IS_ENABLED(CONFIG_CFG80211)
+   if (dev->ieee80211_ptr)
+      return true;
 #endif
+   return false;
 }
 
 
@@ -1490,12 +1494,11 @@
 
 #  if LOGLEVEL >= 4
    {
-      struct timeval now;
-      do_gettimeofday(&now);
+      u64 now;
+
+      now = ktime_get_ns();
       LOG(3, (KERN_DEBUG "bridge-%s: time %d\n",
-	      bridge->name,
-	      (int)((now.tv_sec * 1000000 + now.tv_usec)
-                    - (vnetTime.tv_sec * 1000000 + vnetTime.tv_usec))));
+	      bridge->name, (int)((now - vnetTime) / NSEC_PER_USEC)));
    }
 #  endif
 
diff --color -uNr vmware-host-modules-w16.2.4/vmnet-only/compat_compiler.h vmware-host-modules-git/vmnet-only/compat_compiler.h
--- vmware-host-modules-w16.2.4/vmnet-only/compat_compiler.h	1970-01-01 08:00:00.000000000 +0800
+++ vmware-host-modules-git/vmnet-only/compat_compiler.h	2022-08-06 22:58:06.165898000 +0800
@@ -0,0 +1,15 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef __COMPAT_COMPILER_H__
+#define __COMPAT_COMPILER_H__
+
+#ifndef fallthrough
+#ifndef __has_attribute
+	#define fallthrough do {} while (0)
+#elif __has_attribute(__fallthrough__)
+	#define fallthrough __attribute__((__fallthrough__))
+#else
+	#define fallthrough do {} while (0)
+#endif /* __has_attribute */
+#endif /* fallthrough */
+
+#endif /* __COMPAT_COMPILER_H__ */
diff --color -uNr vmware-host-modules-w16.2.4/vmnet-only/compat_netdevice.h vmware-host-modules-git/vmnet-only/compat_netdevice.h
--- vmware-host-modules-w16.2.4/vmnet-only/compat_netdevice.h	2022-07-27 04:27:27.000000000 +0800
+++ vmware-host-modules-git/vmnet-only/compat_netdevice.h	2022-08-06 22:58:06.165898000 +0800
@@ -196,4 +196,13 @@
 #define compat_netif_trans_update(d) do { (d)->trans_start = jiffies; } while (0)
 #endif
 
+static inline int compat_netif_rx_ni(struct sk_buff *skb)
+{
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 18, 0)
+	return netif_rx(skb);
+#else
+	return netif_rx_ni(skb);
+#endif
+}
+
 #endif /* __COMPAT_NETDEVICE_H__ */
diff --color -uNr vmware-host-modules-w16.2.4/vmnet-only/driver.c vmware-host-modules-git/vmnet-only/driver.c
--- vmware-host-modules-w16.2.4/vmnet-only/driver.c	2022-07-27 04:27:27.000000000 +0800
+++ vmware-host-modules-git/vmnet-only/driver.c	2022-08-06 22:58:06.165898000 +0800
@@ -38,6 +38,7 @@
 #include "compat_sock.h"
 #include <linux/kdev_t.h>
 #include <linux/mutex.h>
+#include "compat_compiler.h"
 
 #define __KERNEL_SYSCALLS__
 #include <asm/io.h>
@@ -971,7 +972,7 @@
          }
          /* Should we require verFromUser == VNET_API_VERSION? */
       }
-      /* fall thru */
+      fallthrough;
 
    case SIOCGETAPIVERSION:
       retval = put_user(VNET_API_VERSION, (uint32 *)ioarg) ?  -EFAULT : 0;
diff --color -uNr vmware-host-modules-w16.2.4/vmnet-only/hub.c vmware-host-modules-git/vmnet-only/hub.c
--- vmware-host-modules-w16.2.4/vmnet-only/hub.c	2022-07-27 04:27:27.000000000 +0800
+++ vmware-host-modules-git/vmnet-only/hub.c	2022-08-06 22:58:06.165898000 +0800
@@ -234,7 +234,7 @@
  */
 
 VNetJack *
-VNetHub_AllocPvn(uint8 id[]) // IN: the PVN ID to alloc on
+VNetHub_AllocPvn(uint8 id[VNET_PVN_ID_LEN]) // IN: the PVN ID to alloc on
 {
    return VNetHubAlloc(TRUE, -1, id);
 }
@@ -258,7 +258,7 @@
 VNetJack *
 VNetHubAlloc(Bool allocPvn, // IN: TRUE for PVN, FALSE for vnet
 	     int hubNum,    // IN: vnet # to use (-1 if allocPvn == TRUE)
-	     uint8 id[])    // IN: PVN ID to use (NULL if allocPvn == FALSE)
+	     uint8 id[VNET_PVN_ID_LEN])    // IN: PVN ID to use (NULL if allocPvn == FALSE)
 {
    VNetHub *hub;
    VNetJack *jack;
diff --color -uNr vmware-host-modules-w16.2.4/vmnet-only/netif.c vmware-host-modules-git/vmnet-only/netif.c
--- vmware-host-modules-w16.2.4/vmnet-only/netif.c	2022-07-27 04:27:27.000000000 +0800
+++ vmware-host-modules-git/vmnet-only/netif.c	2022-08-06 22:58:06.165898000 +0800
@@ -44,7 +44,6 @@
 #include "compat_netdevice.h"
 #include "vmnetInt.h"
 
-
 /*
  * Default min MTU value as defined by kernel versions >= 4.10.0.
  * Use the same value for earlier versions of the kernel which do not
@@ -86,6 +85,19 @@
 static int VNetNetifChangeMtu(struct net_device *dev, int new_mtu);
 #endif
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 15, 0)
+static void
+__dev_addr_set(struct net_device *dev, const void *addr, size_t len)
+{
+	memcpy(dev->dev_addr, addr, len);
+}
+
+static void dev_addr_set(struct net_device *dev, const u8 *addr)
+{
+	__dev_addr_set(dev, addr, dev->addr_len);
+}
+#endif
+
 
 /*
  *----------------------------------------------------------------------
@@ -253,7 +265,7 @@
 
    memset(&netIf->stats, 0, sizeof netIf->stats);
 
-   memcpy(dev->dev_addr, netIf->port.paddr, sizeof netIf->port.paddr);
+   __dev_addr_set(dev, netIf->port.paddr, sizeof(netIf->port.paddr));
 
    if (register_netdev(dev) != 0) {
       LOG(0, (KERN_NOTICE "%s: could not register network device\n",
@@ -345,7 +357,7 @@
    /* send to the host interface */
    skb->dev = netIf->dev;
    skb->protocol = eth_type_trans(skb, netIf->dev);
-   netif_rx_ni(skb);
+   compat_netif_rx_ni(skb);
    netIf->stats.rx_packets++;
 
    return;
@@ -532,7 +544,7 @@
       return -EINVAL;
    }
    memcpy(netIf->port.paddr, addr->sa_data, dev->addr_len);
-   memcpy(dev->dev_addr, addr->sa_data, dev->addr_len);
+   dev_addr_set(dev, addr->sa_data);
    return 0;
 }
 
diff --color -uNr vmware-host-modules-w16.2.4/vmnet-only/smac.c vmware-host-modules-git/vmnet-only/smac.c
--- vmware-host-modules-w16.2.4/vmnet-only/smac.c	2022-07-27 04:27:27.000000000 +0800
+++ vmware-host-modules-git/vmnet-only/smac.c	2022-08-06 22:58:06.165898000 +0800
@@ -4116,7 +4116,7 @@
 
 void SMACINT
 SMAC_SetMac(SMACState *state,  // IN: state to update
-	    uint8 *mac)        // IN: pointer to host adapter's MAC
+	    const uint8 *mac)  // IN: pointer to host adapter's MAC
 {
    VNETKdPrintCall(("SMAC_SetMac"));
    ASSERT(state);
diff --color -uNr vmware-host-modules-w16.2.4/vmnet-only/smac.h vmware-host-modules-git/vmnet-only/smac.h
--- vmware-host-modules-w16.2.4/vmnet-only/smac.h	2022-07-27 04:27:27.000000000 +0800
+++ vmware-host-modules-git/vmnet-only/smac.h	2022-08-06 22:58:06.165898000 +0800
@@ -72,7 +72,7 @@
 void SMACINT
 SMAC_InitState(struct SMACState **ptr);           // IN: state to alloc/init
 void SMACINT
-SMAC_SetMac(struct SMACState *state, uint8 *mac); // IN: state, and host MAC
+SMAC_SetMac(struct SMACState *state, const uint8 *mac); // IN: state, and host MAC
 void SMACINT
 SMAC_CleanupState(struct SMACState **ptr);        // IN: state to cleanup/dealloc
 
diff --color -uNr vmware-host-modules-w16.2.4/vmnet-only/userif.c vmware-host-modules-git/vmnet-only/userif.c
--- vmware-host-modules-w16.2.4/vmnet-only/userif.c	2022-07-27 04:27:27.000000000 +0800
+++ vmware-host-modules-git/vmnet-only/userif.c	2022-08-06 22:58:06.165898000 +0800
@@ -87,6 +87,33 @@
 #   define skb_frag_off(frag) (frag)->page_offset
 #endif
 
+#if COMPAT_LINUX_VERSION_CHECK_LT(5, 10, 0)
+static inline unsigned int
+compat_csum_and_copy_to_user(const void *src, void __user *dst, int len,
+			     int *err)
+{
+	return csum_and_copy_to_user(src, dst, len, 0, err);
+}
+#else
+static inline unsigned int
+compat_csum_and_copy_to_user(const void *src, void __user *dst, int len,
+			     int *err)
+{
+	unsigned int csum;
+
+#if COMPAT_LINUX_VERSION_CHECK_LT(5, 19, 0)
+	csum = csum_and_copy_to_user(src, dst, len);
+#else
+	csum = csum_partial(src, len, ~0U);
+	if (copy_to_user(dst, src, len))
+		csum = 0;
+#endif /* 5.19 */
+
+	*err = (csum == 0 ? -EFAULT : 0);
+	return csum;
+}
+#endif /* 5.10 */
+
 /*
  *-----------------------------------------------------------------------------
  *
@@ -561,12 +588,7 @@
       return -EINVAL;
    }
 
-#if COMPAT_LINUX_VERSION_CHECK_LT(5, 10, 0)
-   csum = csum_and_copy_to_user(skb->data + offset, curr, len, 0, &err);
-#else
-   csum = csum_and_copy_to_user(skb->data + offset, curr, len);
-   err = (csum == 0) ? -EFAULT : 0;
-#endif
+   csum = compat_csum_and_copy_to_user(skb->data + offset, curr, len, &err);
    if (err) {
       return err;
    }
@@ -580,14 +602,9 @@
 	 const void *vaddr;
 
 	 vaddr = kmap(skb_frag_page(frag));
-#if COMPAT_LINUX_VERSION_CHECK_LT(5, 10, 0)
-	 tmpCsum = csum_and_copy_to_user(vaddr + skb_frag_off(frag),
-					 curr, skb_frag_size(frag), 0, &err);
-#else
-	 tmpCsum = csum_and_copy_to_user(vaddr + skb_frag_off(frag),
-					 curr, skb_frag_size(frag));
-         err = (tmpCsum == 0) ? -EFAULT : 0;
-#endif
+	 tmpCsum = compat_csum_and_copy_to_user(vaddr + skb_frag_off(frag),
+						curr, skb_frag_size(frag),
+						&err);
 	 kunmap(skb_frag_page(frag));
 
 	 if (err) {
diff --color -uNr vmware-host-modules-w16.2.4/vmnet-only/vm_assert.h vmware-host-modules-git/vmnet-only/vm_assert.h
--- vmware-host-modules-w16.2.4/vmnet-only/vm_assert.h	2022-07-27 04:27:27.000000000 +0800
+++ vmware-host-modules-git/vmnet-only/vm_assert.h	2022-08-06 22:58:06.165898000 +0800
@@ -40,7 +40,11 @@
 
 // XXX not necessary except some places include vm_assert.h improperly
 #include "vm_basic_types.h"
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 15, 0)
 #include <stdarg.h>
+#else
+#include <linux/stdarg.h>
+#endif
 
 #ifdef __cplusplus
 extern "C" {
diff --color -uNr vmware-host-modules-w16.2.4/vmnet-only/vm_basic_defs.h vmware-host-modules-git/vmnet-only/vm_basic_defs.h
--- vmware-host-modules-w16.2.4/vmnet-only/vm_basic_defs.h	2022-07-27 04:27:27.000000000 +0800
+++ vmware-host-modules-git/vmnet-only/vm_basic_defs.h	2022-08-06 22:58:06.169898000 +0800
@@ -51,7 +51,7 @@
  *   C90 7.17, C99 7.19, C11 7.19
  */
 #if !defined(VMKERNEL)
-#  include <stddef.h>
+#  include <linux/stddef.h>
 #else
    /*
     * Vmkernel's bogus __FreeBSD__ value causes gcc <stddef.h> to break.
diff --color -uNr vmware-host-modules-w16.2.4/vmnet-only/vm_device_version.h vmware-host-modules-git/vmnet-only/vm_device_version.h
--- vmware-host-modules-w16.2.4/vmnet-only/vm_device_version.h	2022-07-27 04:27:27.000000000 +0800
+++ vmware-host-modules-git/vmnet-only/vm_device_version.h	2022-08-06 22:58:06.169898000 +0800
@@ -35,6 +35,8 @@
 #endif
 #endif
 
+#include <linux/pci_ids.h>
+
 /* LSILogic 53C1030 Parallel SCSI controller
  * LSILogic SAS1068 SAS controller
  */
@@ -54,7 +56,10 @@
  *    VMware HD Audio codec
  *    VMware HD Audio controller
  */
+#ifndef PCI_VENDOR_ID_VMWARE
 #define PCI_VENDOR_ID_VMWARE                    0x15AD
+#endif
+
 #define PCI_DEVICE_ID_VMWARE_SBX                0x0420
 #define PCI_DEVICE_ID_VMWARE_SVGA_EFI           0x0407
 #define PCI_DEVICE_ID_VMWARE_SVGA3              0x0406
@@ -74,7 +79,11 @@
 #define PCI_DEVICE_ID_VMWARE_1394               0x0780
 #define PCI_DEVICE_ID_VMWARE_BRIDGE             0x0790
 #define PCI_DEVICE_ID_VMWARE_ROOTPORT           0x07A0
+
+#ifndef PCI_DEVICE_ID_VMWARE_VMXNET3
 #define PCI_DEVICE_ID_VMWARE_VMXNET3            0x07B0
+#endif
+
 #define PCI_DEVICE_ID_VMWARE_PVSCSI             0x07C0
 #define PCI_DEVICE_ID_VMWARE_82574              0x07D0
 #define PCI_DEVICE_ID_VMWARE_AHCI               0x07E0
